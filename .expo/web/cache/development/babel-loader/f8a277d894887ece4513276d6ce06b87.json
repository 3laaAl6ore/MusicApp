{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from \"../store/actions\";\nimport TrackItem from \"./TrackItem\";\nimport Colors from \"../Utilities/AppColors\";\nimport Styles from \"../Utilities/AppStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Dashboard = function Dashboard() {\n  var _itunesData$allTracks, _itunesData$allTracks2;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      SetIsLoding = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchStr = _useState4[0],\n      setSearchStr = _useState4[1];\n\n  var getResults = function getResults() {\n    var artist, action;\n    return _regeneratorRuntime.async(function getResults$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SetIsLoding(true);\n            artist = searchStr;\n            action = actions.getTracksByArtist(artist);\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(dispatch(action));\n\n          case 6:\n            SetIsLoding(false);\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0.message);\n            SetIsLoding(false);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 9]], Promise);\n  };\n\n  var itunesData = useSelector(function (state) {\n    return state.allTracks;\n  });\n  return _jsxs(View, {\n    style: Styles.container,\n    children: [_jsxs(View, {\n      style: Styles.search_container,\n      children: [_jsx(View, {\n        style: {\n          width: '85%'\n        },\n        children: _jsx(TextInput, {\n          value: searchStr,\n          onChangeText: function onChangeText(text) {\n            return setSearchStr(text);\n          },\n          keyboardType: \"default\",\n          autoCapitalize: true,\n          placeholder: \"Search...\",\n          style: {\n            width: '100%',\n            backgroundColor: Colors.white,\n            borderRadius: 8,\n            paddingHorizontal: 20,\n            paddingVertical: 10,\n            fontFamily: 'Poppins-Regular',\n            fontSize: 16\n          }\n        })\n      }), _jsx(View, {\n        style: {\n          width: '15%',\n          alignItems: 'flex-end'\n        },\n        children: _jsx(TouchableOpacity, {\n          onPress: getResults,\n          style: {\n            width: '90%',\n            backgroundColor: Colors.yellow,\n            borderRadius: 8,\n            alignItems: 'center',\n            height: 44,\n            justifyContent: 'center'\n          },\n          children: _jsx(Text, {\n            style: {\n              fontFamily: 'Poppins-SemiBold',\n              color: Colors.white,\n              fontSize: 18\n            },\n            children: \"GO\"\n          })\n        })\n      })]\n    }), isLoading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"black\"\n    }) : _jsx(View, {\n      style: {\n        width: '100%',\n        paddingHorizontal: 20\n      },\n      children: (itunesData == null ? void 0 : (_itunesData$allTracks = itunesData.allTracks) == null ? void 0 : (_itunesData$allTracks2 = _itunesData$allTracks.results) == null ? void 0 : _itunesData$allTracks2.length) > 0 ? _jsx(FlatList, {\n        data: itunesData.allTracks.results,\n        keyExtractor: function keyExtractor(item) {\n          return item.trackId;\n        },\n        renderItem: function renderItem(track) {\n          return _jsx(TrackItem, {\n            item: track.item\n          });\n        }\n      }) : _jsx(Text, {\n        children: \"No\"\n      })\n    })]\n  });\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/eliyhuc/Desktop/redux/Components/Dashboard.js"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","actions","TrackItem","Colors","Styles","Dashboard","isLoading","SetIsLoding","dispatch","searchStr","setSearchStr","getResults","artist","action","getTracksByArtist","console","log","message","itunesData","state","allTracks","container","search_container","width","text","backgroundColor","white","borderRadius","paddingHorizontal","paddingVertical","fontFamily","fontSize","alignItems","yellow","height","justifyContent","color","results","length","item","trackId","track"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,WAAd,EAA0BC,SAA1B,EAAoCC,QAApC,QAAmD,OAAnD;;;;;;;AAEA,SAASC,WAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AACA,OAAO,KAAKC,OAAZ;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;;;;AAEA,IAAMC,SAAS,GAAC,SAAVA,SAAU,GAAK;AAAA;;AAEjB,kBAAgCP,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,mBAAkCF,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACfJ,YAAAA,WAAW,CAAC,IAAD,CAAX;AACMK,YAAAA,MAFS,GAEAH,SAFA;AAGXI,YAAAA,MAHW,GAGHZ,OAAO,CAACa,iBAAR,CAA0BF,MAA1B,CAHG;AAAA;AAAA;AAAA,6CAKLJ,QAAQ,CAACK,MAAD,CALH;;AAAA;AAMXN,YAAAA,WAAW,CAAC,KAAD,CAAX;AANW;AAAA;;AAAA;AAAA;AAAA;AASXQ,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIC,OAAhB;AACAV,YAAAA,WAAW,CAAC,KAAD,CAAX;;AAVW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AA+BA,MAAMW,UAAU,GAAGnB,WAAW,CAAC,UAAAoB,KAAK;AAAA,WAAIA,KAAK,CAACC,SAAV;AAAA,GAAN,CAA9B;AAGA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEhB,MAAM,CAACiB,SAApB;AAAA,eAEI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEjB,MAAM,CAACkB,gBAApB;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA,kBACI,KAAC,SAAD;AACI,UAAA,KAAK,EAAEd,SADX;AAEI,UAAA,YAAY,EAAE,sBAAAe,IAAI;AAAA,mBAAId,YAAY,CAACc,IAAD,CAAhB;AAAA,WAFtB;AAGI,UAAA,YAAY,EAAC,SAHjB;AAII,UAAA,cAAc,EAAE,IAJpB;AAKI,UAAA,WAAW,EAAC,WALhB;AAMI,UAAA,KAAK,EAAE;AACHD,YAAAA,KAAK,EAAC,MADH;AACWE,YAAAA,eAAe,EAACtB,MAAM,CAACuB,KADlC;AAEHC,YAAAA,YAAY,EAAC,CAFV;AAEaC,YAAAA,iBAAiB,EAAC,EAF/B;AAEmCC,YAAAA,eAAe,EAAC,EAFnD;AAGHC,YAAAA,UAAU,EAAC,iBAHR;AAG2BC,YAAAA,QAAQ,EAAC;AAHpC;AANX;AADJ,QADJ,EAeI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACR,UAAAA,KAAK,EAAC,KAAP;AAAcS,UAAAA,UAAU,EAAC;AAAzB,SAAb;AAAA,kBACI,KAAC,gBAAD;AAAkB,UAAA,OAAO,EAAErB,UAA3B;AAAuC,UAAA,KAAK,EAAE;AAC1CY,YAAAA,KAAK,EAAC,KADoC;AAC7BE,YAAAA,eAAe,EAACtB,MAAM,CAAC8B,MADM;AAE1CN,YAAAA,YAAY,EAAC,CAF6B;AAE1BK,YAAAA,UAAU,EAAC,QAFe;AAELE,YAAAA,MAAM,EAAC,EAFF;AAG1CC,YAAAA,cAAc,EAAC;AAH2B,WAA9C;AAAA,oBAKI,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAACL,cAAAA,UAAU,EAAC,kBAAZ;AACjBM,cAAAA,KAAK,EAACjC,MAAM,CAACuB,KADI;AACGK,cAAAA,QAAQ,EAAC;AADZ,aAAb;AAAA;AAAA;AALJ;AADJ,QAfJ;AAAA,MAFJ,EA+BKzB,SAAS,GAAG,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC;AAAtC,MAAH,GAGN,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACiB,QAAAA,KAAK,EAAC,MAAP;AAAeK,QAAAA,iBAAiB,EAAC;AAAjC,OAAb;AAAA,gBACK,CAAAV,UAAU,QAAV,qCAAAA,UAAU,CAAEE,SAAZ,qEAAuBiB,OAAvB,4CAAgCC,MAAhC,IAAyC,CAAzC,GAEI,KAAC,QAAD;AAAU,QAAA,IAAI,EAAEpB,UAAU,CAACE,SAAX,CAAqBiB,OAArC;AACA,QAAA,YAAY,EAAE,sBAAAE,IAAI;AAAA,iBAAEA,IAAI,CAACC,OAAP;AAAA,SADlB;AAEA,QAAA,UAAU,EAAE,oBAAAC,KAAK;AAAA,iBAAE,KAAC,SAAD;AAAW,YAAA,IAAI,EAAEA,KAAK,CAACF;AAAvB,YAAF;AAAA;AAFjB,QAFJ,GAQC,KAAC,IAAD;AAAA;AAAA;AATN,MAlCR;AAAA,IADJ;AAmDH,CA5FD;;AA6FA,eAAelC,SAAf","sourcesContent":["import React,{useCallback,useEffect,useState} from 'react'\r\nimport {Text, View ,ActivityIndicator,FlatList, TextInput, TouchableOpacity} from 'react-native'\r\nimport { useSelector , useDispatch } from 'react-redux';\r\nimport * as actions from '../store/actions';\r\nimport TrackItem from './TrackItem';\r\nimport Colors from '../Utilities/AppColors';\r\nimport Styles from '../Utilities/AppStyle';\r\n\r\nconst Dashboard=()=> {\r\n\r\n    const [isLoading,SetIsLoding] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const [searchStr, setSearchStr] = useState('');\r\n    \r\n    const getResults = async () =>{\r\n        SetIsLoding(true);\r\n        const artist = searchStr;\r\n        let action= actions.getTracksByArtist(artist);\r\n        try{\r\n            await dispatch(action);\r\n            SetIsLoding(false);\r\n        }\r\n        catch(err){\r\n            console.log(err.message);\r\n            SetIsLoding(false);\r\n        }\r\n    }\r\n\r\n    // const getTracksAction= useCallback(async ()=>{\r\n    //     SetIsLoding(true);\r\n    //     const artist='Coldplay';\r\n    //     let action= actions.getTracksByArtist(artist);\r\n    //     try{\r\n    //         await dispatch(action);\r\n    //         SetIsLoding(false);\r\n    //     }\r\n    //     catch(err){\r\n    //         console.log(err.message);\r\n    //         SetIsLoding(false);\r\n    //     }\r\n    // },[actions.getTracksByArtist,dispatch])\r\n    // useEffect(()=>{\r\n    //     getTracksAction()\r\n    // },[getTracksAction])\r\n\r\n    const itunesData = useSelector(state =>(state.allTracks));\r\n\r\n\r\n    return (\r\n        <View style={Styles.container}>\r\n\r\n            <View style={Styles.search_container}>\r\n                <View style={{width:'85%'}}>\r\n                    <TextInput\r\n                        value={searchStr}\r\n                        onChangeText={text => setSearchStr(text)}\r\n                        keyboardType='default'\r\n                        autoCapitalize={true}\r\n                        placeholder='Search...'\r\n                        style={{\r\n                            width:'100%', backgroundColor:Colors.white,\r\n                            borderRadius:8, paddingHorizontal:20, paddingVertical:10,\r\n                            fontFamily:'Poppins-Regular', fontSize:16\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{width:'15%', alignItems:'flex-end'}}>\r\n                    <TouchableOpacity onPress={getResults} style={{\r\n                        width:'90%', backgroundColor:Colors.yellow,\r\n                        borderRadius:8, alignItems:'center', height:44,\r\n                        justifyContent:'center'\r\n                    }}>\r\n                        <Text style={{fontFamily:'Poppins-SemiBold',\r\n                    color:Colors.white, fontSize:18}}>\r\n                            GO\r\n                        </Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n\r\n            {isLoading ?(<ActivityIndicator size=\"large\" color='black'/>)\r\n            :\r\n            (\r\n                <View style={{width:'100%', paddingHorizontal:20}}>\r\n                    {itunesData?.allTracks?.results?.length > 0 ?\r\n                     (\r\n                         <FlatList data={itunesData.allTracks.results}\r\n                         keyExtractor={item=>item.trackId}\r\n                         renderItem={track=><TrackItem item={track.item}/>}\r\n                         />\r\n                     )\r\n                     :\r\n                     (<Text>No</Text>)\r\n                    }\r\n                </View>\r\n            )\r\n            }\r\n        </View>\r\n    )\r\n}\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}