{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Style from \"../Utilities/AppStyle\";\nimport Colors from \"../Utilities/AppColors\";\nimport { Video, AVPlaybackStatus } from 'expo-av';\nimport MaterialIcons from \"@expo/vector-icons/MaterialIcons\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TrackDetails = function TrackDetails(props) {\n  var video = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var trackData = props.route.params.track;\n\n  var Add2AsyncStorge = function Add2AsyncStorge() {\n    var myData, track, items;\n    return _regeneratorRuntime.async(function Add2AsyncStorge$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('Playlist'));\n\n          case 3:\n            myData = _context.sent;\n\n            if (myData != null) {\n              console.log('MY DATA: ' + myData);\n              track = {\n                kind: trackData.kind,\n                artistId: trackData.artistId,\n                collectionId: trackData.collectionId,\n                trackId: trackData.trackId,\n                artistName: trackData.artistName,\n                collectionName: trackData.collectionName,\n                trackName: trackData.trackName,\n                previewUrl: trackData.previewUrl,\n                artworkUrl100: trackData.artworkUrl100,\n                releaseDate: trackData.releaseDate,\n                trackTimeMillis: trackData.trackTimeMillis\n              };\n            } else {\n              items = [{\n                kind: trackData.kind,\n                artistId: trackData.artistId,\n                collectionId: trackData.collectionId,\n                trackId: trackData.trackId,\n                artistName: trackData.artistName,\n                collectionName: trackData.collectionName,\n                trackName: trackData.trackName,\n                previewUrl: trackData.previewUrl,\n                artworkUrl100: trackData.artworkUrl100,\n                releaseDate: trackData.releaseDate,\n                trackTimeMillis: trackData.trackTimeMillis\n              }];\n              AsyncStorage.setItem('Playlist', JSON.stringify({\n                songs: items\n              }));\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: Style.container,\n    children: [_jsx(Video, {\n      ref: video,\n      style: Style.video,\n      source: {\n        uri: trackData.previewUrl\n      },\n      useNativeControls: true,\n      resizeMode: \"contain\",\n      isLooping: true,\n      onPlaybackStatusUpdate: function onPlaybackStatusUpdate(status) {\n        return setStatus(function () {\n          return status;\n        });\n      }\n    }), _jsxs(View, {\n      style: {\n        padding: 20,\n        backgroundColor: Colors.gray_text\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontFamily: 'Poppins-SemiBold',\n          color: Colors.white,\n          fontSize: 22\n        },\n        children: trackData.artistName\n      }), _jsx(Text, {\n        style: {\n          fontFamily: 'Poppins-Light',\n          color: Colors.white,\n          fontSize: 17\n        },\n        children: trackData.trackName\n      })]\n    }), _jsx(View, {\n      style: {\n        padding: 20,\n        backgroundColor: Colors.white,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsx(TouchableOpacity, {\n        onPress: Add2AsyncStorge,\n        style: {\n          width: 70,\n          height: 70,\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: Colors.orange,\n          borderRadius: 50\n        },\n        children: _jsx(MaterialIcons, {\n          name: \"favorite-border\",\n          color: Colors.white,\n          size: 50\n        })\n      })\n    })]\n  });\n};\n\nexport var screenOptions = function screenOptions(navData) {\n  return {\n    headerTitle: navData.route.params.track.trackName\n  };\n};\nexport default TrackDetails;","map":{"version":3,"sources":["C:/Users/a/Desktop/MyApps/redux/redux/Components/TrackDetails.js"],"names":["React","useState","useRef","Style","Colors","Video","AVPlaybackStatus","MaterialIcons","AsyncStorage","TrackDetails","props","video","status","setStatus","trackData","route","params","track","Add2AsyncStorge","getItem","myData","console","log","kind","artistId","collectionId","trackId","artistName","collectionName","trackName","previewUrl","artworkUrl100","releaseDate","trackTimeMillis","items","setItem","JSON","stringify","songs","container","uri","padding","backgroundColor","gray_text","fontFamily","color","white","fontSize","alignItems","justifyContent","width","height","orange","borderRadius","screenOptions","navData","headerTitle"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from 'react';\nimport { Text, View, TouchableOpacity, Alert } from 'react-native';\nimport Style from '../Utilities/AppStyle';\nimport Colors from '../Utilities/AppColors';\nimport { Video, AVPlaybackStatus } from 'expo-av';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst TrackDetails = props => {\n\n    const video = useRef(null);\n    const [status, setStatus] = useState({});\n    const trackData = props.route.params.track;\n\n    const Add2AsyncStorge = async () => {\n        try {\n            const myData = await AsyncStorage.getItem('Playlist');\n            if(myData != null){\n                console.log('MY DATA: ' + myData);   \n                const track ={\n                    kind: trackData.kind,\n                    artistId: trackData.artistId,\n                    collectionId: trackData.collectionId,\n                    trackId: trackData.trackId,\n                    artistName: trackData.artistName,\n                    collectionName: trackData.collectionName,\n                    trackName: trackData.trackName,\n                    previewUrl: trackData.previewUrl,\n                    artworkUrl100: trackData.artworkUrl100,\n                    releaseDate: trackData.releaseDate,\n                    trackTimeMillis: trackData.trackTimeMillis\n\n                }\n            \n            } else {\n                //First set an item\n                const items = [{\n                    kind: trackData.kind,\n                    artistId: trackData.artistId,\n                    collectionId: trackData.collectionId,\n                    trackId: trackData.trackId,\n                    artistName: trackData.artistName,\n                    collectionName: trackData.collectionName,\n                    trackName: trackData.trackName,\n                    previewUrl: trackData.previewUrl,\n                    artworkUrl100: trackData.artworkUrl100,\n                    releaseDate: trackData.releaseDate,\n                    trackTimeMillis: trackData.trackTimeMillis\n                }];\n                AsyncStorage.setItem('Playlist', JSON.stringify({\n                    songs: items\n                }));\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    return (\n        <View style={Style.container}>\n\n            <Video\n                ref={video}\n                style={Style.video}\n                source={{uri: trackData.previewUrl}}\n                useNativeControls\n                resizeMode=\"contain\"\n                isLooping\n                onPlaybackStatusUpdate={status => setStatus(() => status)}\n            />\n\n            <View style={{padding:20, backgroundColor:Colors.gray_text}}>\n                <Text style={{fontFamily:'Poppins-SemiBold', color:Colors.white, fontSize:22}}>{trackData.artistName}</Text>\n                <Text style={{fontFamily:'Poppins-Light', color:Colors.white, fontSize:17}}>{trackData.trackName}</Text>\n            </View>\n\n            <View style={{padding:20, backgroundColor:Colors.white, alignItems:'center', justifyContent:'center'}}>\n                <TouchableOpacity onPress={Add2AsyncStorge} style={{width:70,height:70, alignItems:'center', justifyContent:'center', backgroundColor:Colors.orange, borderRadius:50}}>\n                    <MaterialIcons name='favorite-border' color={Colors.white} size={50} />\n                </TouchableOpacity>\n            </View>\n\n\n        </View>\n    )\n}\nexport const screenOptions = navData => {\n    return {\n        headerTitle: navData.route.params.track.trackName\n    }\n}\nexport default TrackDetails;"]},"metadata":{},"sourceType":"module"}