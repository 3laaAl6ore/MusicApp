{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from \"./store/actions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Dashboard = function Dashboard() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      SetIsLoding = _useState2[1];\n\n  var dispatch = useDispatch();\n  var getTracksAction = useCallback(function _callee() {\n    var artist, action;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SetIsLoding(true);\n            artist = 'Coldplay';\n            action = actions.getTracksByArtist(artist);\n            _context.prev = 3;\n            console.log(action);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(action));\n\n          case 7:\n            SetIsLoding(false);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0.message);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 10]], Promise);\n  }, [actions.getTracksByArtist, dispatch]);\n  useEffect(function () {\n    getTracksAction();\n  }, [getTracksAction]);\n  return _jsx(View, {\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      flex: 1\n    },\n    children: isLoading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"black\"\n    }) : _jsx(Text, {\n      children: \"aaa\"\n    })\n  });\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/הנדסת תוכנה/שנה ב/React Native/23.12.2021/reduxAPP/Dashboard.js"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","actions","Dashboard","isLoading","SetIsLoding","dispatch","getTracksAction","artist","action","getTracksByArtist","console","log","message","justifyContent","alignItems","flex"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,WAAd,EAA0BC,SAA1B,EAAoCC,QAApC,QAAmD,OAAnD;;;;AAEA,SAASC,WAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AACA,OAAO,KAAKC,OAAZ;;;AAEA,IAAMC,SAAS,GAAC,SAAVA,SAAU,GAAK;AAEjB,kBAAgCJ,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,MAAMM,eAAe,GAAEV,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BQ,YAAAA,WAAW,CAAC,IAAD,CAAX;AACMG,YAAAA,MAFyB,GAElB,UAFkB;AAG3BC,YAAAA,MAH2B,GAGnBP,OAAO,CAACQ,iBAAR,CAA0BF,MAA1B,CAHmB;AAAA;AAK3BG,YAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AAL2B;AAAA,6CAMrBH,QAAQ,CAACG,MAAD,CANa;;AAAA;AAO3BJ,YAAAA,WAAW,CAAC,KAAD,CAAX;AAP2B;AAAA;;AAAA;AAAA;AAAA;AAW3BM,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIC,OAAhB;;AAX2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAahC,CAACX,OAAO,CAACQ,iBAAT,EAA2BJ,QAA3B,CAbgC,CAAlC;AAeAR,EAAAA,SAAS,CAAC,YAAI;AACVS,IAAAA,eAAe;AAClB,GAFQ,EAEP,CAACA,eAAD,CAFO,CAAT;AAKA,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACO,MAAAA,cAAc,EAAE,QAAjB;AAA0BC,MAAAA,UAAU,EAAE,QAAtC;AAA+CC,MAAAA,IAAI,EAAC;AAApD,KAAb;AAAA,cACKZ,SAAS,GAAG,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC;AAAtC,MAAH,GAET,KAAC,IAAD;AAAA;AAAA;AAHL,IADJ;AAQH,CAlCD;;AAmCA,eAAeD,SAAf","sourcesContent":["import React,{useCallback,useEffect,useState} from 'react'\r\nimport {Text, View ,ActivityIndicator} from 'react-native'\r\nimport { useSelector , useDispatch } from 'react-redux';\r\nimport * as actions from './store/actions';\r\n\r\nconst Dashboard=()=> {\r\n\r\n    const [isLoading,SetIsLoding] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const getTracksAction= useCallback(async ()=>{\r\n        SetIsLoding(true);\r\n        const artist='Coldplay';\r\n        let action= actions.getTracksByArtist(artist);\r\n        try{\r\n            console.log(action);\r\n            await dispatch(action);\r\n            SetIsLoding(false);\r\n        \r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n        }\r\n    },[actions.getTracksByArtist,dispatch])\r\n\r\n    useEffect(()=>{\r\n        getTracksAction()\r\n    },[getTracksAction])\r\n\r\n\r\n    return (\r\n        <View style={{justifyContent: 'center',alignItems: 'center',flex:1}}>\r\n            {isLoading ?(<ActivityIndicator size=\"large\" color='black'/>)\r\n            :\r\n            (<Text>aaa</Text>)\r\n            }\r\n        </View>\r\n    )\r\n}\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}