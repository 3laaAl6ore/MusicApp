{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from \"../store/actions\";\nimport TrackItem from \"./TrackItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Dashboard = function Dashboard() {\n  var _itunesData$allTracks, _itunesData$allTracks2;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      SetIsLoding = _useState2[1];\n\n  var dispatch = useDispatch();\n  var getTracksAction = useCallback(function _callee() {\n    var artist, action;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SetIsLoding(true);\n            artist = 'Coldplay';\n            action = actions.getTracksByArtist(artist);\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(dispatch(action));\n\n          case 6:\n            SetIsLoding(false);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0.message);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 9]], Promise);\n  }, [actions.getTracksByArtist, dispatch]);\n  useEffect(function () {\n    getTracksAction();\n  }, [getTracksAction]);\n  var itunesData = useSelector(function (state) {\n    return state.allTracks.results;\n  });\n  return _jsx(View, {\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      flex: 1\n    },\n    children: isLoading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"black\"\n    }) : _jsx(View, {\n      children: (itunesData == null ? void 0 : (_itunesData$allTracks = itunesData.allTracks) == null ? void 0 : (_itunesData$allTracks2 = _itunesData$allTracks.results) == null ? void 0 : _itunesData$allTracks2.length) > 0 ? _jsx(FlatList, {\n        data: itunesData.allTracks,\n        keyExtractor: function keyExtractor(track) {\n          return track.trackId;\n        },\n        renderItem: function renderItem(trackRow) {\n          return _jsx(TrackItem, {\n            item: trackRow.track\n          });\n        }\n      }) : _jsx(Text, {\n        children: \"No\"\n      })\n    })\n  });\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/הנדסת תוכנה/שנה ב/React Native/23.12.2021/reduxAPP/Components/Dashboard.js"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","actions","TrackItem","Dashboard","isLoading","SetIsLoding","dispatch","getTracksAction","artist","action","getTracksByArtist","console","log","message","itunesData","state","allTracks","results","justifyContent","alignItems","flex","length","track","trackId","trackRow"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,WAAd,EAA0BC,SAA1B,EAAoCC,QAApC,QAAmD,OAAnD;;;;;AAEA,SAASC,WAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AACA,OAAO,KAAKC,OAAZ;AACA,OAAOC,SAAP;;;AAEA,IAAMC,SAAS,GAAC,SAAVA,SAAU,GAAK;AAAA;;AAEjB,kBAAgCL,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,MAAMO,eAAe,GAAEX,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BS,YAAAA,WAAW,CAAC,IAAD,CAAX;AACMG,YAAAA,MAFyB,GAElB,UAFkB;AAG3BC,YAAAA,MAH2B,GAGnBR,OAAO,CAACS,iBAAR,CAA0BF,MAA1B,CAHmB;AAAA;AAAA;AAAA,6CAKrBF,QAAQ,CAACG,MAAD,CALa;;AAAA;AAM3BJ,YAAAA,WAAW,CAAC,KAAD,CAAX;AAN2B;AAAA;;AAAA;AAAA;AAAA;AAU3BM,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIC,OAAhB;;AAV2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAYhC,CAACZ,OAAO,CAACS,iBAAT,EAA2BJ,QAA3B,CAZgC,CAAlC;AAcAT,EAAAA,SAAS,CAAC,YAAI;AACVU,IAAAA,eAAe;AAClB,GAFQ,EAEP,CAACA,eAAD,CAFO,CAAT;AAIA,MAAMO,UAAU,GAAGf,WAAW,CAAC,UAAAgB,KAAK;AAAA,WAAIA,KAAK,CAACC,SAAN,CAAgBC,OAApB;AAAA,GAAN,CAA9B;AAGA,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,cAAc,EAAE,QAAjB;AAA0BC,MAAAA,UAAU,EAAE,QAAtC;AAA+CC,MAAAA,IAAI,EAAC;AAApD,KAAb;AAAA,cACKhB,SAAS,GAAG,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC;AAAtC,MAAH,GAGN,KAAC,IAAD;AAAA,gBACK,CAAAU,UAAU,QAAV,qCAAAA,UAAU,CAAEE,SAAZ,qEAAuBC,OAAvB,4CAAgCI,MAAhC,IAAyC,CAAzC,GAEI,KAAC,QAAD;AAAU,QAAA,IAAI,EAAEP,UAAU,CAACE,SAA3B;AACA,QAAA,YAAY,EAAE,sBAAAM,KAAK;AAAA,iBAAEA,KAAK,CAACC,OAAR;AAAA,SADnB;AAEA,QAAA,UAAU,EAAE,oBAAAC,QAAQ;AAAA,iBAAE,KAAC,SAAD;AAAW,YAAA,IAAI,EAAEA,QAAQ,CAACF;AAA1B,YAAF;AAAA;AAFpB,QAFJ,GASC,KAAC,IAAD;AAAA;AAAA;AAVN;AAJR,IADJ;AAsBH,CAjDD;;AAkDA,eAAenB,SAAf","sourcesContent":["import React,{useCallback,useEffect,useState} from 'react'\r\nimport {Text, View ,ActivityIndicator,FlatList} from 'react-native'\r\nimport { useSelector , useDispatch } from 'react-redux';\r\nimport * as actions from '../store/actions';\r\nimport TrackItem from './TrackItem';\r\n\r\nconst Dashboard=()=> {\r\n\r\n    const [isLoading,SetIsLoding] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const getTracksAction= useCallback(async ()=>{\r\n        SetIsLoding(true);\r\n        const artist='Coldplay';\r\n        let action= actions.getTracksByArtist(artist);\r\n        try{\r\n            await dispatch(action);\r\n            SetIsLoding(false);\r\n        \r\n        }\r\n        catch(err){\r\n            console.log(err.message)\r\n        }\r\n    },[actions.getTracksByArtist,dispatch])\r\n\r\n    useEffect(()=>{\r\n        getTracksAction()\r\n    },[getTracksAction])\r\n\r\n    const itunesData = useSelector(state =>(state.allTracks.results));\r\n   // itunesData?(console.log(itunesData.allTracks.results)):(    console.log(itunesData))\r\n\r\n    return (\r\n        <View style={{justifyContent: 'center',alignItems: 'center',flex:1}}>\r\n            {isLoading ?(<ActivityIndicator size=\"large\" color='black'/>)\r\n            :\r\n            (\r\n                <View>\r\n                    {itunesData?.allTracks?.results?.length > 0 ?\r\n                     (\r\n                         <FlatList data={itunesData.allTracks}\r\n                         keyExtractor={track=>track.trackId}\r\n                         renderItem={trackRow=><TrackItem item={trackRow.track}/>}\r\n                         />\r\n                         \r\n                     )\r\n                     :\r\n                     (<Text>No</Text>)\r\n                    }\r\n                </View>\r\n            )\r\n            }\r\n        </View>\r\n    )\r\n}\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}