{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from \"../store/actions\";\nimport TrackItem from \"./TrackItem\";\nimport Colors from \"../Utilities/AppColors\";\nimport Styles from \"../Utilities/AppStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Dashboard = function Dashboard(props) {\n  var _itunesData$allTracks, _itunesData$allTracks2;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      SetIsLoding = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var _useState3 = useState('Metallica'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchStr = _useState4[0],\n      setSearchStr = _useState4[1];\n\n  var getResults = function getResults() {\n    var artist, action;\n    return _regeneratorRuntime.async(function getResults$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SetIsLoding(true);\n            artist = searchStr;\n            action = actions.getTracksByArtist(artist);\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(dispatch(action));\n\n          case 6:\n            SetIsLoding(false);\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0.message);\n            SetIsLoding(false);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 9]], Promise);\n  };\n\n  var itunesData = useSelector(function (state) {\n    return state.allTracks;\n  });\n  return _jsxs(View, {\n    style: Styles.container,\n    children: [_jsxs(View, {\n      style: Styles.search_container,\n      children: [_jsx(View, {\n        style: {\n          width: '85%'\n        },\n        children: _jsx(TextInput, {\n          value: searchStr,\n          onChangeText: function onChangeText(text) {\n            return setSearchStr(text);\n          },\n          keyboardType: \"default\",\n          placeholder: \"Search...\",\n          style: {\n            width: '100%',\n            backgroundColor: Colors.white,\n            borderRadius: 8,\n            paddingHorizontal: 20,\n            paddingVertical: 10,\n            fontFamily: 'Poppins-Regular',\n            fontSize: 16\n          }\n        })\n      }), _jsx(View, {\n        style: {\n          width: '15%',\n          alignItems: 'flex-end'\n        },\n        children: _jsx(TouchableOpacity, {\n          onPress: getResults,\n          style: {\n            width: '90%',\n            backgroundColor: Colors.gray_text,\n            borderRadius: 8,\n            alignItems: 'center',\n            height: 44,\n            justifyContent: 'center'\n          },\n          children: _jsx(Text, {\n            style: {\n              fontFamily: 'Poppins-SemiBold',\n              color: Colors.white,\n              fontSize: 18\n            },\n            children: \"GO\"\n          })\n        })\n      })]\n    }), _jsx(View, {\n      style: Styles.results_container,\n      children: isLoading ? _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"black\"\n      }) : _jsx(View, {\n        style: {\n          width: '100%',\n          paddingHorizontal: 20\n        },\n        children: (itunesData == null ? void 0 : (_itunesData$allTracks = itunesData.allTracks) == null ? void 0 : (_itunesData$allTracks2 = _itunesData$allTracks.results) == null ? void 0 : _itunesData$allTracks2.length) > 0 ? _jsx(FlatList, {\n          data: itunesData.allTracks.results,\n          keyExtractor: function keyExtractor(item) {\n            return item.trackId;\n          },\n          renderItem: function renderItem(track) {\n            return _jsx(TrackItem, {\n              item: track.item,\n              onRowPress: function onRowPress() {\n                props.navigation.navigate('TrackDetails', {\n                  track: track.item\n                });\n              }\n            });\n          }\n        }) : _jsx(Text, {\n          children: \"No\"\n        })\n      })\n    })]\n  });\n};\n\nexport var screenOptions = function screenOptions(navData) {\n  return {\n    headerTitle: 'Welcome',\n    headerShown: false\n  };\n};\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/a/Desktop/MyApps/redux/redux/Components/Dashboard.js"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","actions","TrackItem","Colors","Styles","Dashboard","props","isLoading","SetIsLoding","dispatch","searchStr","setSearchStr","getResults","artist","action","getTracksByArtist","console","log","message","itunesData","state","allTracks","container","search_container","width","text","backgroundColor","white","borderRadius","paddingHorizontal","paddingVertical","fontFamily","fontSize","alignItems","gray_text","height","justifyContent","color","results_container","results","length","item","trackId","track","navigation","navigate","screenOptions","navData","headerTitle","headerShown"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;;;;;;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,OAAZ;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;;;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA;;AAEvB,kBAAiCR,QAAQ,CAAC,KAAD,CAAzC;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,WAAlB;;AAEA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AACA,mBAAkCF,QAAQ,CAAC,WAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACfJ,YAAAA,WAAW,CAAC,IAAD,CAAX;AACMK,YAAAA,MAFS,GAEAH,SAFA;AAGXI,YAAAA,MAHW,GAGFb,OAAO,CAACc,iBAAR,CAA0BF,MAA1B,CAHE;AAAA;AAAA;AAAA,6CAKLJ,QAAQ,CAACK,MAAD,CALH;;AAAA;AAMXN,YAAAA,WAAW,CAAC,KAAD,CAAX;AANW;AAAA;;AAAA;AAAA;AAAA;AASXQ,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIC,OAAhB;AACAV,YAAAA,WAAW,CAAC,KAAD,CAAX;;AAVW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAcA,MAAMW,UAAU,GAAGpB,WAAW,CAAC,UAAAqB,KAAK;AAAA,WAAKA,KAAK,CAACC,SAAX;AAAA,GAAN,CAA9B;AAGA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,MAAM,CAACkB,SAApB;AAAA,eAEI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAElB,MAAM,CAACmB,gBAApB;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA,kBACI,KAAC,SAAD;AACI,UAAA,KAAK,EAAEd,SADX;AAEI,UAAA,YAAY,EAAE,sBAAAe,IAAI;AAAA,mBAAId,YAAY,CAACc,IAAD,CAAhB;AAAA,WAFtB;AAGI,UAAA,YAAY,EAAC,SAHjB;AAII,UAAA,WAAW,EAAC,WAJhB;AAKI,UAAA,KAAK,EAAE;AACHD,YAAAA,KAAK,EAAE,MADJ;AACYE,YAAAA,eAAe,EAAEvB,MAAM,CAACwB,KADpC;AAEHC,YAAAA,YAAY,EAAE,CAFX;AAEcC,YAAAA,iBAAiB,EAAE,EAFjC;AAEqCC,YAAAA,eAAe,EAAE,EAFtD;AAGHC,YAAAA,UAAU,EAAE,iBAHT;AAG4BC,YAAAA,QAAQ,EAAE;AAHtC;AALX;AADJ,QADJ,EAcI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAER,UAAAA,KAAK,EAAE,KAAT;AAAgBS,UAAAA,UAAU,EAAE;AAA5B,SAAb;AAAA,kBACI,KAAC,gBAAD;AAAkB,UAAA,OAAO,EAAErB,UAA3B;AAAuC,UAAA,KAAK,EAAE;AAC1CY,YAAAA,KAAK,EAAE,KADmC;AAC5BE,YAAAA,eAAe,EAAEvB,MAAM,CAAC+B,SADI;AAE1CN,YAAAA,YAAY,EAAE,CAF4B;AAEzBK,YAAAA,UAAU,EAAE,QAFa;AAEHE,YAAAA,MAAM,EAAE,EAFL;AAG1CC,YAAAA,cAAc,EAAE;AAH0B,WAA9C;AAAA,oBAKI,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AACTL,cAAAA,UAAU,EAAE,kBADH;AAETM,cAAAA,KAAK,EAAElC,MAAM,CAACwB,KAFL;AAEYK,cAAAA,QAAQ,EAAE;AAFtB,aAAb;AAAA;AAAA;AALJ;AADJ,QAdJ;AAAA,MAFJ,EAgCI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE5B,MAAM,CAACkC,iBAApB;AAAA,gBACK/B,SAAS,GACN,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAC;AAAtC,QADM,GAIF,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEiB,UAAAA,KAAK,EAAE,MAAT;AAAiBK,UAAAA,iBAAiB,EAAE;AAApC,SAAb;AAAA,kBACK,CAAAV,UAAU,QAAV,qCAAAA,UAAU,CAAEE,SAAZ,qEAAuBkB,OAAvB,4CAAgCC,MAAhC,IAAyC,CAAzC,GAEO,KAAC,QAAD;AAAU,UAAA,IAAI,EAAErB,UAAU,CAACE,SAAX,CAAqBkB,OAArC;AACI,UAAA,YAAY,EAAE,sBAAAE,IAAI;AAAA,mBAAIA,IAAI,CAACC,OAAT;AAAA,WADtB;AAEI,UAAA,UAAU,EAAE,oBAAAC,KAAK;AAAA,mBAAI,KAAC,SAAD;AACjB,cAAA,IAAI,EAAEA,KAAK,CAACF,IADK;AAEjB,cAAA,UAAU,EAAE,sBAAM;AAACnC,gBAAAA,KAAK,CAACsC,UAAN,CAAiBC,QAAjB,CAA0B,cAA1B,EAAyC;AAACF,kBAAAA,KAAK,EAACA,KAAK,CAACF;AAAb,iBAAzC;AAA6D;AAF/D,cAAJ;AAAA;AAFrB,UAFP,GAWI,KAAC,IAAD;AAAA;AAAA;AAZT;AALZ,MAhCJ;AAAA,IADJ;AA0DH,CAlFD;;AAoFA,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,OAAO,EAAI;AACpC,SAAO;AACHC,IAAAA,WAAW,EAAE,SADV;AAEHC,IAAAA,WAAW,EAAE;AAFV,GAAP;AAIH,CALM;AAOP,eAAe5C,SAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Text, View, ActivityIndicator, FlatList, TextInput, TouchableOpacity } from 'react-native'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../store/actions';\r\nimport TrackItem from './TrackItem';\r\nimport Colors from '../Utilities/AppColors';\r\nimport Styles from '../Utilities/AppStyle';\r\n\r\n\r\nconst Dashboard = props => {\r\n\r\n    const [isLoading, SetIsLoding] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const [searchStr, setSearchStr] = useState('Metallica');\r\n\r\n    const getResults = async () => {\r\n        SetIsLoding(true);\r\n        const artist = searchStr;\r\n        let action = actions.getTracksByArtist(artist);\r\n        try {\r\n            await dispatch(action);\r\n            SetIsLoding(false);\r\n        }\r\n        catch (err) {\r\n            console.log(err.message);\r\n            SetIsLoding(false);\r\n        }\r\n    }\r\n\r\n    const itunesData = useSelector(state => (state.allTracks));\r\n\r\n\r\n    return (\r\n        <View style={Styles.container}>\r\n\r\n            <View style={Styles.search_container}>\r\n                <View style={{ width: '85%' }}>\r\n                    <TextInput\r\n                        value={searchStr}\r\n                        onChangeText={text => setSearchStr(text)}\r\n                        keyboardType='default'\r\n                        placeholder='Search...'\r\n                        style={{\r\n                            width: '100%', backgroundColor: Colors.white,\r\n                            borderRadius: 8, paddingHorizontal: 20, paddingVertical: 10,\r\n                            fontFamily: 'Poppins-Regular', fontSize: 16\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ width: '15%', alignItems: 'flex-end' }}>\r\n                    <TouchableOpacity onPress={getResults} style={{\r\n                        width: '90%', backgroundColor: Colors.gray_text,\r\n                        borderRadius: 8, alignItems: 'center', height: 44,\r\n                        justifyContent: 'center'\r\n                    }}>\r\n                        <Text style={{\r\n                            fontFamily: 'Poppins-SemiBold',\r\n                            color: Colors.white, fontSize: 18\r\n                        }}>\r\n                            GO\r\n                        </Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n\r\n            <View style={Styles.results_container}>\r\n                {isLoading ? (\r\n                    <ActivityIndicator size=\"large\" color='black' />)\r\n                    :\r\n                    (\r\n                        <View style={{ width: '100%', paddingHorizontal: 20 }}>\r\n                            {itunesData?.allTracks?.results?.length > 0 ?\r\n                                (\r\n                                    <FlatList data={itunesData.allTracks.results}\r\n                                        keyExtractor={item => item.trackId}\r\n                                        renderItem={track => <TrackItem \r\n                                            item={track.item}\r\n                                            onRowPress={() => {props.navigation.navigate('TrackDetails',{track:track.item})}}\r\n                                         />}\r\n                                    />\r\n                                )\r\n                                :\r\n                                (<Text>No</Text>)\r\n                            }\r\n                        </View>\r\n                    )\r\n                }\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport const screenOptions = navData => {\r\n    return {\r\n        headerTitle: 'Welcome',\r\n        headerShown: false\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}